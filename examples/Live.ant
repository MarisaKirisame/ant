type nat = 
  | Z 
  | S of nat
;;

type list 'a =
  | Nil
  | Cons of 'a * list 'a
;;

let index = fun x n ->
  match x with
  | Cons (xh, xt) -> 
    (match n with
    | Z -> xh
    | S m -> index xt m);;

type expr =
  | EInt of int
  | EPlus of expr * expr
  | EVar of nat
  | EAbs of expr
  | EApp of expr * expr
  | ETrue
  | EFalse
  | EIf of expr * expr * expr
  | ENil
  | ECons of expr * expr
  | EMatchList of expr * expr * expr
  | EFix of expr
;;

type value = 
  | VInt of int
  | VAbs of expr * list value
  | VTrue
  | VFalse
  | VNil
  | VCons of value
  | VFix of expr * list value
;;